-- Clientes devem ter no mínimo 13 anos
CREATE OR REPLACE FUNCTION CLIENTE_RESTRICAO_DATA()
RETURNS TRIGGER
AS $$
BEGIN
    IF EXTRACT(YEAR FROM AGE(NEW.DT_NASC_CLIENTE, CURRENT_DATE)) < 13 THEN
        RAISE EXCEPTION 'O cliente deve ter no mínimo 13 anos de idade!'
    END IF;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_CLIENTE_RESTRICAO_DATA BEFORE INSERT OR UPDATE ON CLIENTE FOR EACH ROW EXECUTE PROCEDURE CLIENTE_RESTRICAO_DATA();

-- E-mails devem ser válidos com o seguinte padrão: [\w\d]+@[\w\d]+(\.\w{1,}){1,}
-- Em cliente:
CREATE OR REPLACE FUNCTION CLIENTE_RESTRICAO_EMAIL()
RETURNS TRIGGER
AS $$
BEGIN
    IF NEW.EMAIL_CLIENTE NOT SIMILAR TO '[\w\d]+@[\w\d]+(\.\w{1,}){1,}' THEN
        RAISE EXCEPTION 'O e-mail inserido é inválido!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_CLIENTE_RESTRICAO_EMAIL BEFORE INSERT OR UPDATE ON CLIENTE FOR EACH ROW EXECUTE PROCEDURE CLIENTE_RESTRICAO_EMAIL();

-- E em funcionário também:
CREATE OR REPLACE FUNCTION FUNCIONARIO_RESTRICAO_EMAIL()
RETURNS TRIGGER
AS $$
BEGIN
    IF NEW.EMAIL_FUNCIONARIO NOT SIMILAR TO '[\w\d]+@[\w\d]+(\.\w{1,}){1,}' THEN
        RAISE EXCEPTION 'O e-mail inserido é inválido!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_FUNCIONARIO_RESTRICAO_EMAIL BEFORE INSERT OR UPDATE ON FUNCIONARIO FOR EACH ROW EXECUTE PROCEDURE FUNCIONARIO_RESTRICAO_EMAIL();

-- Funcionários devem ter no mínimo 16 anos
CREATE OR REPLACE FUNCTION FUNCIONARIO_RESTRICAO_DATA()
RETURNS TRIGGER
AS $$
BEGIN
    IF EXTRACT(YEAR FROM AGE(NEW.DT_NASC_FUNCIONARIO, CURRENT_DATE)) < 16 THEN
        RAISE EXCEPTION 'O funcionário deve ter no mínimo 16 anos de idade!'
    END IF;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_FUNCIONARIO_RESTRICAO_DATA BEFORE INSERT OR UPDATE ON FUNCIONARIO FOR EACH ROW EXECUTE PROCEDURE FUNCIONARIO_RESTRICAO_DATA();

-- O cupom deve ter ao menos um dia de duração
CREATE OR REPLACE FUNCTION CUPOM_RESTRICAO_TEMPO()
RETURNS TRIGGER 
AS $$
BEGIN
    IF NEW.DATA_EXPIRACAO - CURRENT_DATE = 0 THEN
        RAISE EXCEPTION 'O cupom deve ter ao menos um dia de duração!';
    END IF;
    IF NEW.DATA_EXPIRACAO - CURRENT_DATE < 0 THEN
        RAISE EXCEPTION 'O cupom não deve expirar no passado, utilize uma expiração de ao menos um dia!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_CUPOM_RESTRICAO_TEMPO BEFORE INSERT OR UPDATE ON CUPOM FOR EACH ROW EXECUTE PROCEDURE CUPOM_RESTRICAO_TEMPO();

-- O cupom deve ter no mínimo 10 utilizações disponíveis ao ser criado
CREATE OR REPLACE FUNCTION CUPOM_RESTRICAO_USO()
RETURNS TRIGGER 
AS $$
BEGIN
    IF NEW.USOS_DISPONIVEIS < 10 THEN
        RAISE EXCEPTION 'O cupom deve ter no mínimo 10 utilizações!';
    END IF;
    IF NEW.USOS_DISPONIVEIS < 0 THEN
        RAISE EXCEPTION 'Use apenas valores positivos paa a quantidade de usos disponíveis!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_CUPOM_RESTRICAO_USO BEFORE INSERT ON CUPOM FOR EACH ROW EXECUTE PROCEDURE CUPOM_RESTRICAO_USO();

-- O desconto deve ser de no máximo 90%
CREATE OR REPLACE FUNCTION CUPOM_RESTRICAO_DESCONTO()
RETURNS TRIGGER 
AS $$
BEGIN
    IF NEW.DESCONTO > 0.90 THEN
        RAISE EXCEPTION 'O valor máximo de desconto é 90%%!';
    END IF;
    IF NEW.DESCONTO < 0.0 THEN
        RAISE EXCEPTION 'O desconto não pode ser negativo!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER TRIGGER_CUPOM_RESTRICAO_DESCONTO BEFORE INSERT OR UPDATE ON CUPOM FOR EACH ROW EXECUTE PROCEDURE CUPOM_RESTRICAO_DESCONTO();